{"name":"Cloudprint logocert","tagline":"Google Cloud Print Logo Certification Automation","body":"#Google Cloud Print Logo Certification Tool#\r\n\r\nThe Logo Certification tool is a group of tests designed to aide in running\r\nLogo Certification tests that printers must pass in order to obtain Logo\r\nCertification. The tool is made up of a number of python files, and utilizes\r\nthe python UnitTest module to actually execute the tests.\r\n\r\n##List of modules and their purpose#\r\n\r\n* testcert.py - the entry point and driver of the tests. All of the actual tests\r\nare located in this file.\r\n* _chrome.py - Routines and methods to execute jobs that are specific to Chrome.\r\nPrinting jobs, uploading files, etc.\r\n* _chromedriver.py - Methods to support start and stopping ChromeDriver, and\r\nall of the various search methods that ChromeDriver supports, to search and\r\ninteract with elements in web pages.\r\n* _cloudprintmgr.py - Methods to support interacting with Google Cloud Print\r\nproperties like the management page.\r\n* _common.py - some shared functions within the package.\r\n* _config.py - configuration information. This needs to be updated for each\r\nspecific device under test. This file needs to be edited by the user executing\r\nthe test.\r\n* _device.py - Methods to support populating the device attributes.\r\n* _gdocs.py - Methods to interact with Google Docs and Google Drive.\r\n* _jsonparser.py - Methods to parse and handle JSON formatted docs and strings.\r\n* _log.py - Provides a logger to ensure proper logging of all activities.\r\n* _mdns.py - Provides support for monitoring mdns broadcasts.\r\n* _oauth2.py - Provides support to get oauth2 tokens.\r\n* _privet.py - Provides privet structures.\r\n* _sheets.py - Uses _gdocs.py to create and populate a Google spreadsheet.\r\n* _transport.py - Provides HTTP support for accessing web services.\r\n\r\n## Test Suites#\r\nThe tests are divided into suites the focus on specific areas. The areas tested\r\nare:\r\n\r\n* Privet Protocol Integration\r\n* Pre-registration Tests\r\n* Cloud Print Registration\r\n* Post-registration Tests\r\n* Local Discovery Tests\r\n* Local Print Tests\r\n* Chrome Dialog Print Tests\r\n* Printing Tests\r\n* Printer Capabilities\r\n* Printer State Tests\r\n* Job State Tests\r\n* Cloud Print Unregistration\r\n* Post-unregistration Tests\r\n\r\n## DEPENDENCIES#\r\n\r\n###ChromeDriver#\r\nIn order to execute the tests, ChromeDriver is required on the system used to\r\nexecute the tests. ChromeDriver can be downloaded from:\r\n\r\n    https://sites.google.com/a/chromium.org/chromedriver/\r\n\r\nInstall ChromeDriver and ensure the binary is in the system path. Make sure you\r\nget at least version 2.17, which has a feature that allows access the Chrome\r\nPrint Dialog. Earlier versions of ChromeDriver cannot access the print dialog.\r\n\r\nChromeDriver 2.17 requires Chrome version 43 or higher. Install at least version\r\n43 on your system.\r\n\r\n###Selenium#\r\nSelenium is also required, as ChromeDriver has a dependency on Selenium. To\r\ninstall Selenium, use the commands:\r\n\r\n    sudo pip install selenium\r\n\r\nor download Selenium from:\r\n    http://docs.seleniumhq.org/download/\r\n\r\n###ZeroConf#\r\nThe Python Zeroconf package is used to execute some of the mDNS tests. Install\r\nZeroConf from the package located here:\r\n\r\nUsing PIP:\r\n\r\n    sudo pip install zeroconf\r\n\r\nOr download from one of the following:\r\n    \r\n    https://pypi.python.org/pypi/zeroconf\r\n    https://github.com/jstasiak/python-zeroconf\r\n\r\n###Gdata#\r\nThe tool will also store test results into a Google Spreadsheet. If you want\r\nto use this functionality, you will need to install gdata. Install gdata from:\r\n\r\n    https://github.com/google/gdata-python-client\r\n\r\ngdata also depends on ElementTree; however, most systems will have ElementTree\r\ninstalled already. To test if it's installed, from a Python shell try:\r\n\r\n    from xml.etree import ElementTree\r\n\r\n##Configuration#\r\nBefore executing the Logo Certification Tool, a number of steps are\r\nrequired to get your test environment set up correctly.\r\n\r\n1. Test Account - Use a test account that uses Gmail, in order to properly\r\nauthenticate against Google properties and also use OAuth2 credentials. Once\r\nyou have obtained a test account, obtain OAuth2 credentials from the Google\r\nDevelopers Console. You'll also need a 2nd test account, without the OAuth2\r\ncredentials.\r\n\r\n* Log in with your test account at https://accounts.google.com/\r\n* Access the Google Developers Console: \r\n\r\n    https://console.developers.google.com\r\n\r\n* Create a project\r\n* Access the project you just created\r\n* Select the APIs & auth tab\r\n* Select the Credentials link\r\n* Two tokens are needed: under Client ID for native applications, copy the\r\n**Client ID** and **Client Secret**\r\n\r\n2. Edit _config.py\r\n\r\nThe following sections should be edited:\r\n\r\n* AUTOMODE --> You should probably set this to False, as this will cause each\r\nprint test to wait for user input to determine if it passed or failed. If\r\nAUTOMODE = True, then all jobs will be printed out and regardless of how they\r\nlook, the test will pass.\r\n* CAPS --> this should reflect the actual capabilities of the printer. Set the\r\nfollowing values to True or False, depending on if the printer supports them\r\nor not: COLLATE, COLOR (False if monochrome printer), COPIES (True if copies\r\nare supported), DUPLEX, LAYOUT_ISSUE (Currently Chrome has a bug so that the\r\nprinter must still provide page_orientation), LOCAL_PRINT (set to True if your\r\nprinter supports local printing before the printer is registered).\r\n* GOOGLE_DOCS (note: your links will have your own ids in them):\r\n  - **DOC1**: should be a one page Google Doc. The value should look like:\r\n    'https://docs.google.com/document/d/1HepfcAZ3DassmfM6mgoUzdbAf3KeinWerbLhyif7DGQ/edit',\r\n  - **SHEET1**: a 1 page Google Spreadsheet. Value should look like:\r\n    'https://docs.google.com/spreadsheets/d/19Kq-4B2x4vT2iveAZLBWGqtAmFA9FrZfG3sfPPqb7pg/edit#gid=0',\r\n  - **PREZ1**: a 1 page slide (presentation). The value should look like:\r\n    'https://docs.google.com/presentation/d/1-_tc7W1HLh-f7YJT6r1VZWDlHg_Q4O0gxBw9BEoVPM0/edit#slide=id.p',\r\n  - **GMAIL1**: a 1 page gmail message. The value should look like:\r\n    'https://mail.google.com/mail/u/0/#inbox/14470e55054eec70',\r\n  - **GMAIL2**: a 1 page gmail message containing non U.S. characters. Our test mail has about 10 different languages in it.\r\n  - **GMAIL3**: a 1 page gmail message with an embedded image.\r\n\r\nThe documents and emails must belong to the USER account you set up below.\r\nUSER2 does not need those documents or mail messages.\r\n\r\n* LOGFILES --> change this from /tmp/logocert if you want the log files to be\r\nstored in a different location.\r\n* PRINTER --> add the correct values for CERTID (Certification ID), FIRMWARE,\r\nIP address, MANUFACTURER, MODEL, PORT (integer, not string), SERIAL, and STATUS.\r\n* TEST --> If you don't want the test results to be written to a Google\r\nSpreadsheet, then change SPREADSHEET to False.\r\n* TESTENV --> add the versions used during testing, for Android, Chrome, the\r\nChromebook, Firefox, IE, and tablet used.\r\n* USER --> add the client id, client secret of the test account from step 1.\r\nAlso add the email address and password of this user.\r\n* USER2 --> add the email address and password of the 2nd test account.\r\n\r\nSave the _config.py and then all of the prepatory work is completed. Now simply\r\nexecute testcert.py:\r\n\r\n##Execution#\r\n\r\n    ./testcert.py\r\n\r\nNote that the first time Chrome signs in, you may need to sign in manually, as\r\nChromeDriver cannot access the fields in chrome://chrome-signin field. Watch the\r\ncommand line prompt for instructions. During the tests, sometimes you'll be\r\nprompted to accept printer registration, and other times to ignore or cancel\r\nregistration requests. Pay attention to the testcert.py output as it will ask\r\nyou to turn the printer on and off at various times during the test process.\r\n\r\nIf you need to remove some of the test suites, edit testcert.py, and comment out\r\nthe the suite.addTest lines of the suites you don't want to run. The following\r\nsuites require the printer to be registered:\r\n\r\n* LocalDiscovery\r\n* LocalPrinting\r\n* ChromePrinting\r\n* Printer\r\n* PrinterState\r\n* JobState\r\n* Printing\r\n* RunAfter24Hours\r\n* Unregister\r\n\r\nThe order that the tests run in is not deterministic, but the suites will run\r\nin the order they are placed in.\r\n\r\nOnce the test has run, results will be placed in a log file. Log files are\r\ncreated with a date-time stamp in the logname. All of the test results will be\r\nannotated with passed, skipped, blocked, or failed, and possibly some other\r\ndebug information. And if TEST['SPREADSHEET'] = True, then the results will be\r\nplaced in a spreadsheet for easy reading of the test results.\r\n\r\n##Known Issues#\r\n\r\nThere are a number of conditions that might cause the automation to fail.\r\nHere are some known conditions that might cause failures:\r\n\r\n1 If you have a large printer list, the automation may not find the printer, as\r\nit will only search for the printer under test on the first page.\r\n\r\n2 If a page gets updated after chromedriver finds an element, it may error with\r\nthe message: \"stale element reference\". There is no way to prevent this type of\r\nerror, so just be aware it may occur from time to time.\r\n\r\n3 When you finish running tests, if Chrome does not entirely close (like on\r\nOS X), then you may need to close Chrome completely before running the tests\r\nagain.\r\n\r\n\r\n","google":"4201052","note":"Don't delete this file! It's used internally to help with page regeneration."}