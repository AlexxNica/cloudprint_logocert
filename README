Google Cloud Print Logo Certification Tool

The Logo Certification tool is a group of tests designed to aide in running
Logo Certification tests that printers must pass in order to obtain Logo
Certification. The tool is made up of a number of python files, and utilizes
the python UnitTest module to actually execute the tests.

List of modules and their purpose:

--> testcert.py - the entry point and driver of the tests. All of the actual tests
are located in this file.
--> _common.py - some shared functions within the package.
--> _config.py - configuration information. This needs to be updated for each
specific device under test. This file needs to be edited by the user executing
the test
--> _ticket.py - Provides the Cloud Job Ticket (CJT) object and methods to specify 
various print options for both cloud printing and local printing
--> _cpslib.py - Methods to access GCP API's
--> _device.py - Methods to support populating the device attributes.
--> _gdocs.py - Methods to interact with Google Docs and Google Drive.
--> _jsonparser.py - Methods to parse and handle JSON formatted docs and strings.
--> _log.py - Provides a logger to ensure proper logging of all activities.
--> _mdns.py - Provides support for monitoring mdns advertisements.
--> _oauth2.py - Provides support to get oauth2 tokens.
--> _privet.py - Provides privet structures.
--> _sheets.py - Uses _gdocs.py to create and populate a Google spreadsheet.
--> _transport.py - Provides HTTP support for accessing web services.

The tests are divided into suites the focus on specific areas. The areas tested
are:

1. Privet Protocol Integration
2. Pre-registration Tests
3. Cloud Print Registration
4. Post-registration Tests
5. Local Discovery Tests
6. Local Print Tests
7. Printing Tests
8. Printer Capabilities
9. Printer State Tests
10. Job State Tests
11. Cloud Print Unregistration
12. Post-unregistration Tests

DEPENDENCIES:

OAuth2Client and Google API client are required, To install, use the commands:

sudo pip install --upgrade oauth2client
sudo pip install --upgrade google-api-python-client

The Python Zeroconf package is used to execute some of the mDNS tests. Install
ZeroConf from the package located here:

Using PIP:
sudo pip install zeroconf

Or download from one of the following:
https://pypi.python.org/pypi/zeroconf
https://github.com/jstasiak/python-zeroconf

The tool will also store test results into a Google Spreadsheet. If you want
to use this functionality, you will need to install gdata. Install gdata from:

https://github.com/google/gdata-python-client

gdata depends on tlslite, if you get an error stack trace such as:
File "/usr/local/lib/python2.7/dist-packages/gdata/oauth/rsa.py", line 10
  from tlslite.utils import keyfactory
ImportError: No module named tlslite.utils

then install tlslite by running:
sudo pip install tlslite

gdata also depends on ElementTree; however, most systems will have ElementTree
installed already. To test if it's installed, from a Python shell try:

from xml.etree import ElementTree

Before executing the Logo Certification Tool, a number of preparatory steps are
required to get your test environment set up correctly.

1. Test Account - Use a test account that uses Gmail, in order to properly
authenticate against Google properties and also use OAuth2 credentials. Once
you have obtained a test account, obtain OAuth2 credentials from the Google
Developers Console. You'll also need a 2nd test account, without the OAuth2
credentials.

- Log in with your test account at https://accounts.google.com/
- Access the Google Developers Console: https://console.developers.google.com
- Create a project
- Access the project you just created
- In the left three-bar/hamburger menu, open "API Manager"
- Select the Credentials link on the left
- Create an OAuth2.0 Client ID of type "Other", native has been renamed to
  "Other" in many places.
- Two tokens are needed: under Client ID for native applications, copy the
-- Client ID
-- Client Secret

2. Edit _config.py

The following sections should be edited:

- AUTOMODE --> You should probably set this to False, as this will cause each
print test to wait for user input to determine if it passed or failed. If
AUTOMODE = True, then all jobs will be printed out and regardless of how they
look, the test will pass.
- CAPS --> this should reflect the actual capabilities of the printer. Set the
following values to True or False, depending on if the printer supports them
or not: COLLATE, COLOR (False if monochrome printer), COPIES (True if copies
are supported), DUPLEX, LAYOUT_ISSUE (Currently Chrome has a bug so that the
printer must still provide page_orientation), LOCAL_PRINT (set to True if your
printer supports local printing before the printer is registered).

- SLEEP --> This script tries its best to avoid using sleep but in the case that 
it is used, you can tweak the sleep times based on the categories. The printer 
specific ones are REGISTRATION, and PRINTER_STATE, defaulted to 5 and 10 seconds
respectively.

You may specify which tests to run/ignore via editing:
- TEST['RUN'] --> Add a '#' prefix in front of a test name to exclude from test

The documents and emails must belong to the USER account you set up below.
USER2 does not need those documents or mail messages.

- LOGFILES --> change this from /tmp/logocert if you want the log files to be
stored in a different location.
- PRINTER --> add the correct values for CERTID (Certification ID), FIRMWARE,
IP address, MANUFACTURER, MODEL, PORT (integer, not string), SERIAL, and STATUS.
- TEST --> If you don't want the test results to be written to a Google
Spreadsheet, then change SPREADSHEET to False.
- TESTENV --> add the versions used during testing
- USER --> add the client id, client secret of the test account from step 1.
Also add the email address and password of this user. 
- USER2 --> add the email address and password of the 2nd test account.

Save the _config.py and then all of the preparatory work is completed. Now simply
execute testcert.py (NOTE: The user account should have no GCP printers registered 
under it before this script runs):

./testcert.py

Note that the first time you run this script, you may need to enter your credentials
and sign in manually and click to authorize permissions. During the tests, sometimes you'll be
prompted to accept printer registration on the device, and other times to ignore or cancel
registration requests. Pay attention to the testcert.py output as it will ask
you to turn the printer on and off at various times during the test process. All prompt 
actions are highlighted and create a beep sound when they appear.

If you need to remove some of the test suites, edit _config.py (TEST['RUN']), 
and add a '#' infront of suite names you don't want to run. The following
suites require the printer to be registered:

- LocalDiscovery
- LocalPrinting
- Printer
- PrinterState
- JobState
- Printing
- RunAfter24Hours
- Unregister

The order that the test run in is not deterministic, but the suites will run
in the order they are placed in.

Once the test has run, results will be placed in a log file. Log files are
created with a date-time stamp in the logname. All of the test results will be
annotated with passed, skipped, blocked, or failed, and possibly some other
debug information. And if TEST['SPREADSHEET'] = True, then the results will be
placed in a Google spreadsheet for easy reading of the test results.

For each test that are blocked or failed, a cmdline is provided in the Google
spreadsheet for the individual test case to be run again only by itself. 
They follow this format:
    python -m unittest [moduleName].[testSuiteName].[testCaseName]
Example:
    python -m unittest testcert.Privet.testDeviceRegistrationInvalidClaimToken

Known Issues

There are a number of conditions that might cause the automation to fail.
Here are some known conditions that might cause failures:

1. If you have a large printer list, the automation may not find the printer, as
it will only search for the printer under test on the first page.



