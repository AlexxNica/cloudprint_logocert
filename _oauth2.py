"""Copyright 2016 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Some functions to get OAuth2 credentials.
"""

import json
import urllib
import urllib2

from _config import Constants


def UrlEscape(text):
  """Escape any special characters in text.

  Args:
    text: string, characters to be escaped.
  Returns:
    A string that url encodes any special characters.
  """
  return urllib.quote(text, safe='~-._')


def FormatUrl(params):
  """Formats url parameters into a URL query string.

  Args:
    params: A key-value map.
  Returns:
    A URL query string based on input parameters.
  """
  input_list = []
  for item in sorted(params.iteritems(), key=lambda x: x[0]):
    input_list.append('%s=%s' % (item[0], UrlEscape(item[1])))
  return '&'.join(input_list)


def GenerateUrl():
  """Generates the URL for authorizing access.

  This function is based on the following:
  https://developers.google.com/accounts/docs/OAuth2InstalledApp

  Returns:
    A URL to grant permission.
  """
  params = {}
  params['client_id'] = Constants.USER['CLIENT_ID']
  params['redirect_uri'] = Constants.AUTH['REDIRECT']
  params['scope'] = Constants.AUTH['SCOPE']
  params['response_type'] = 'code'
  return '%s?%s' % (Constants.OAUTH, FormatUrl(params))


def GetTokens(auth_code):
  """Obtains OAuth access token and refresh token.

  Args:
    auth_code: code generated by Google Accounts after user grants permission.
  Returns:
    The decoded response from the Google Accounts server. Dictionary should
    include OAuth2 tokens.
  """
  params = {}
  params['client_id'] = Constants.USER['CLIENT_ID']
  params['client_secret'] = Constants.USER['CLIENT_SECRET']
  params['code'] = auth_code
  params['redirect_uri'] = Constants.AUTH['REDIRECT']
  params['grant_type'] = 'authorization_code'

  data = urllib.urlencode(params)

  headers = {
      'User-Agent': 'LogoCert Client',
      'Content-Type': 'application/x-www-form-urlencoded',
      'Accept': 'text/html, */*',
      }

  request_url = Constants.OAUTH_TOKEN

  request = urllib2.Request(request_url, data, headers)
  res = urllib2.urlopen(request)
  response = res.read()
  return json.loads(response)


def RefreshToken():
  """Obtains a new token given a refresh token.

  Returns:
    The decoded response from the Google Accounts server, as a dict. Expected
    fields include 'access_token', 'expires_in', and 'refresh_token'.
  Before you execute this function make sure you've added your account's
  refresh token. This is done automatically when the LogoCert class is
  initialized.
  """
  params = {}
  params['client_id'] = Constants.USER['CLIENT_ID']
  params['client_secret'] = Constants.USER['CLIENT_SECRET']
  params['refresh_token'] = Constants.AUTH['REFRESH']
  params['grant_type'] = 'refresh_token'

  data = urllib.urlencode(params)

  headers = {
      'User-Agent': 'LogoCert Client',
      'Content-Type': 'application/x-www-form-urlencoded',
      'Accept': 'text/html, */*',
      }

  request_url = Constants.OAUTH_TOKEN

  request = urllib2.Request(request_url, data, headers)
  res = urllib2.urlopen(request)
  response = res.read()
  return json.loads(response)
